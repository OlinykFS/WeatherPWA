const CACHE_NAME = "file-viewer-cache-v6";
const FILES_TO_CACHE = [
    "/index.html",
    "/manifest.json",
    "/styles/style.css",
    "/scripts/script.js",
    "/scripts/install-pwa.js",
    "/service-worker.js",
    "/favicon.png",
    "/icons/icon192x192.png"
];

self.addEventListener("install", (event) => {
    event.waitUntil(
        caches.open(CACHE_NAME).then(async (cache) => {
            console.log("üì¶ [SW] –ö–µ—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã...");
            try {
                await cache.addAll(FILES_TO_CACHE);
                console.log("‚úÖ [SW] –°—Ç–∞—Ç–∏–∫–∞ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∞");
            } catch (err) {
                console.error("‚ùå [SW] –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:", err);
            }
        })
    );
    self.skipWaiting();
});

self.addEventListener("fetch", (event) => {
    const url = new URL(event.request.url);

    if (url.pathname === "/files") {
        event.respondWith(
            caches.open(CACHE_NAME).then((cache) => {
                return fetch(event.request)
                    .then((response) => {
                        cache.put(event.request, response.clone());
                        return response;
                    })
                    .catch(() => {
                        return cache.match(event.request).then((cachedResponse) => {
                            if (cachedResponse) {
                                console.log("‚úÖ [SW] –û—Ç–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–µ—à–∞");
                                return cachedResponse;
                            } else {
                                console.log("‚ùå [SW] –ù–µ—Ç –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –æ—Ç–¥–∞—ë–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤");
                                return new Response(JSON.stringify([]), {
                                    headers: {"Content-Type": "application/json"},
                                });
                            }
                        });
                    });
            })
        );
        return;
    }
    if (url.pathname.startsWith("/files/")) {
        event.respondWith(
            caches.open(CACHE_NAME).then((cache) => {
                return fetch(event.request)
                    .then((response) => {
                        console.log("üîñ [SW] –ö–µ—à–∏—Ä—É—é —Ñ–∞–π–ª:", event.request.url);
                        cache.put(event.request, response.clone());
                        return response;
                    })
                    .catch(() => {
                        console.log("üìÅ [SW] –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º, –ø—Ä–æ–±—É–µ–º –æ—Ç–¥–∞—Ç—å –∏–∑ –∫–µ—à–∞:", event.request.url);
                        return cache.match(event.request).then((cachedResponse) => {
                            if (cachedResponse) {
                                console.log("‚úÖ [SW] –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ:", event.request.url);
                                return cachedResponse;
                            } else {
                                console.error("‚ùå [SW] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ:", event.request.url);
                                return new Response("–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ñ–ª–∞–π–Ω", { status: 404 });
                            }
                        });
                    });
            })
        );
        return;
    }

    event.respondWith(
        caches.match(event.request).then((cachedResponse) => {
            if (cachedResponse) {
                return cachedResponse;
            }
            return fetch(event.request)
                .then((networkResponse) => {
                    return caches.open(CACHE_NAME).then((cache) => {
                        cache.put(event.request, networkResponse.clone());
                        return networkResponse;
                    });
                })
                .catch(() => {
                    console.log("üåë [SW] –û—Ñ–ª–∞–π–Ω –∏ –Ω–µ—Ç –≤ –∫–µ—à–µ:", event.request.url);
                    return caches.match("/index.html");
                });
        })
    );
});

self.addEventListener("activate", (event) => {
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (cacheName !== CACHE_NAME) {
                        console.log("üóë [SW] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à:", cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
    self.clients.claim();
});
